import numpy as np
import scipy.linalg

chinaVector = [2.38134933e-04,2.03675270e-04,-5.30179532e-04,-1.07882486e-04
,2.07143719e-03,5.30545076e-04,-3.67175729e-04,-8.30111152e-04
,-2.39406683e-04,2.35370680e-04,8.46183160e-04,1.86859907e-05
,-1.28873432e-06,-6.38929487e-04,-4.35280788e-04,3.45768698e-04
,1.50847569e-04,5.82753797e-04,3.42345011e-04,-1.86488056e-03
,-1.49094162e-03,1.47440427e-04,3.09134804e-04,-1.10039029e-04
,7.98854860e-04,-1.14942389e-03,-3.83634324e-04,2.27908808e-04
,5.02447714e-04,-6.44253392e-04,2.49818608e-04,1.39261014e-03
,-1.08421803e-03,-1.32387807e-03,8.24396557e-04,-1.11563096e-03
,2.35650735e-03,-6.18632184e-04,-6.14698685e-04,-1.25959842e-03
,-5.16789150e-04,-4.40009200e-04,2.59719294e-04,1.71554415e-03
,-4.73637541e-04,1.16465276e-03,4.05530183e-04,-7.81993003e-05
,1.40250500e-04,1.06284933e-04,6.57187134e-04,8.84138863e-04
,-7.97704415e-05,1.05039286e-03,-9.37540608e-05,1.43182627e-03
,5.39719244e-04,-8.73106299e-04,2.97756487e-04,-6.33945572e-04
,1.38696644e-03,-1.97308743e-03,2.44163210e-04,1.07804895e-03
,-5.91300086e-05,7.09466054e-04,-1.44111726e-03,-5.39510045e-04
,5.83446061e-04,8.83374130e-04,3.36932106e-04,-4.96531196e-04
,1.28644181e-03,4.93253581e-04,-4.74124943e-04,7.13773625e-05
,7.26081416e-05,5.53688616e-04,-3.71141155e-04,1.37462688e-03
,-1.25443703e-03,1.41352101e-03,3.24334949e-04,3.67907429e-04
,-5.88019670e-04,-1.26111170e-03,-1.24460459e-03,-2.15810665e-04
,1.47573173e-03,5.15633612e-04,5.37080341e-04,-4.62124270e-04
,-3.09903990e-04,-9.44972504e-04,-1.65959194e-04,-6.62939914e-04
,-3.90541536e-04,-4.92461724e-04,7.19102216e-04,-6.08479080e-04 ] 

blas = lambda name, ndarray: scipy.linalg.get_blas_funcs((name,), (ndarray,))[0]

blas_nrm2 = blas('nrm2', np.array([], dtype=float))
blas_scal = blas('scal', np.array([], dtype=float))

def unit_vector(vec, norm='l2'):
    if norm not in ('l1', 'l2'):
        raise ValueError("'%s' is not a supported norm. Currently supported norms are 'l1' and 'l2'." % norm)
    
    ### ndarray ---> n dimensional array
    if isinstance(vec, np.ndarray):
        vec = np.asarray(vec, dtype=float)
        if norm == 'l1':
            veclen = np.sum(np.abs(vec))
        if norm == 'l2':
            print('norm taken as l2 ???')
            veclen = blas_nrm2(vec)
        if veclen > 0.0:
            return blas_scal(1.0 / veclen, vec)
        else:
            return vec
    print('em jarigindi ??')


print(unit_vector(chinaVector, 'l2'))