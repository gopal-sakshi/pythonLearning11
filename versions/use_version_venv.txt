virtualenv --python="/usr/bin/python2.6" "/path/to/new/virtualenv/"

    virtualenv --python="/home/krishna/.pyenv/versions/3.7.17/bin/python3" .
        created virtual environment CPython3.7.17.final.0-64 in 276ms
        creator CPython3Posix(dest=/home/krishna/Desktop/kpt23/nlu23/cbp-lang-api, clear=False, no_vcs_ignore=False, global=False)
        seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/krishna/.local/share/virtualenv)
        added seed packages: pip==22.0.2, setuptools==59.6.0, wheel==0.37.1
        activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator
    But where is that virtual environment created ???????????


    virtualenv --python="/home/krishna/.pyenv/versions/3.7.17/bin/python3.7" /home/krishna/Desktop/kpt23/nlu23/cbp-lang-api
        created virtual environment CPython3.7.17.final.0-64 in 249ms
        creator CPython3Posix(dest=/home/krishna/Desktop/kpt23/nlu23/cbp-lang-api, clear=False, no_vcs_ignore=False, global=False)
        seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/krishna/.local/share/virtualenv)
        added seed packages: pip==22.0.2, setuptools==59.6.0, wheel==0.37.1
        activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator

    again no idea... where virtual environment got created ??????
    it seems virtualenv ---> this command creates these 3 ===> lib, bin folders & pyvenv.cfg file

(OR)

python3 -m venv "my_env_name"
python3.6 -m venv "my_env_name"

    /home/krishna/.pyenv/versions/3.7.17/bin/python3.7 -m venv .venv
    this created .venv folder... 
    activate the virtual env ===> source .venv/bin/activate
    install pacakges =====> python3 -m pip install -r requirements.txt
=======================================================

Point of "venv"
- to have a version of python other than the mainOne in the system
- but above solutions of using venv ====> all other versions of python be installed locally in our system
- to create a sandboxed environment for Python

Ideal way
- create venv, then install whatever version of python in that venv
- not create venv from locally installed Python
- but alas... it isnt that way...

https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv

=======================================================

manage multiple versions
- venv
    only one version of python exists in ubuntu (Python 3.3)
    but project23 ---> uses spacy 2.3; project24 ----> uses spacy 2.4
    thats why we create different "venv" for each project
- pyenv
    we need to work with multiple versions of python
    to install pyenv
        curl https://pyenv.run | bash
        
        export PYENV_ROOT="$HOME/.pyenv"
        [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
        #### eval "$(pyenv init -)"             ### add this in .bashrc file _________

    pyenv local
    pyenv install 3.6
        installed @ /home/krishna/.pyenv/versions/3.6.15

    pyenv versions ----------> the current active python version in that folder/path
======================================================================================================

Why pyenv
- the python in the system belongs to Ubuntu
- "which python3" -----> /usr/bin/python -----> it belongs to all users
    /home/gsakshi
    /home/krishna
    /home/admin

sudo pip install. 
- installing the Python package globally
- is a problem if another user wants to install a slightly older version of the package.
- package managers (apt, yum, brew) ---> install packages into "global system space" instead of "user space"

- open any python application in vscode
- see from Dockerfile (or) somewhere ---> what version of python is needed
- use pyenv and install that version in
    /home/krishna/.pyenv/versions/3.6.15
- Ctrl + Shift + P ===> python (create environment)
- select the "requirements.txt" for list of packages to install
- a .venv folder gets created
    to activate that folder ===> "source .venv/bin/activate"
    check python version ====> "python3 --version"  ---> it should print 3.6.15
======================================================================================================